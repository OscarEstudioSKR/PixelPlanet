{"version":3,"sources":["recurse/SpritesTerreno01.jpg","recurse/SpritesTerreno02.jpg","recurse/SpritesTerreno03.jpg","recurse/Personajes01.png","js/db.js","js/tabla.js","js/configMap.js","js/algoritmoAEstrella.js","js/seresIA.js","js/mapa.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","db","config","numCasillas","tamCasilla","vista","tablaVacia","id","pos","obstaculo","penalizacionMov","imagenEncadenada","imgSuelo","posImg","listaNombresF","tabla","seres","listaNecesidades","requisito","ser","agotamiento","estado","accion","efecto","tiempoAccion","listaMemorias","nombre","detonante","satisfaccionGeneral","satisfaccionEspecifica","idPos","especifica","origenDescubrimiento","edadDescubrimiento","obtiene","idToPos","y","Math","floor","abs","ran","min","max","random","posToId","vecinos","arrTemp","casillasTotales","push","distAB","origen","destino","direccionMirada","idOrigen","idDestino","generarBioma","bioma","generarBloques","spriteMapaSuelo01","spriteMapaSuelo02","spriteMapaSuelo03","tipo","tamMin","tamMax","cantMin","cantMax","imgBioma","tipoBloque","numCasillasTotal","listaTemp","listaFinal","cantidad","i","concat","length","filter","objetoFijo","map","obj","imagenInterior","crearSer","dest","ruta","posIntermedia","velocidad","direccionMov","img","personajes01","tareaCalculada","memoriaActiva","objetivoEnMarcha","necesidad","necesidadActivada","inteligencia","memoria","sed","hambre","salud","costeBase","direccion","menorF","arr","idArrFinal","f","aCerrada","abierta","cerrada","splice","addObj","g","listaAbierta","posTemp","h","padre","lenght","conversionFinal","listaCerrada","pasosMaximo","rutaCompleta","arrInversa","reverse","next","objFinal","DibujarSeres","_Component","props","_this","init","state","comprobarNecesidades","listaMemoriasCompatibles","memFinal","console","log","memCal","calcular","mem","mejorIdEspecifica","valorFinal","mejorValoracion","memoriActiva","darPasoDireccion","shift","listaCalcular","idFinal","el","objCerrada","objDestino","objAbierta","maximoPasosBucle","obtenerRuta","moverse","vel","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tam","vivido","setInterval","setState","inherits","createClass","key","value","x","styleSer","position","zIndex","left","top","height","width","backgroundImage","backgroundPosition","cambioImagenAccion","backgroundSize","react_default","a","createElement","style","className","Component","DibujarMapa","styleCasilla","color","crearTabla","listaVecinos","vecino","includes","recalcularImagenes","tecla","document","onkeypress","event","keyCode","window","scrollTo","scrollX","scrollY","onkeyup","onmousedown","button","App","mapa","seresIA_DibujarSeres","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1e6ceaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpritesTerreno01.ffc5ffb0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SpritesTerreno02.87139cf4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SpritesTerreno03.3e1f710f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Personajes01.0835a94b.png\";","\r\nexport var db = \r\n{\r\n  'config':{\r\n    'numCasillas': 80,\r\n    'tamCasilla': 80,\r\n    'vista': '',  //VerPenalizacion - VerObstaculo - verIdCasillas\r\n    'tablaVacia': {\r\n      'id': 0,\r\n      'pos': [0,0],\r\n      'obstaculo': false,\r\n      'penalizacionMov': 0,\r\n      'imagenEncadenada': false,\r\n      'imgSuelo': '',\r\n      'posImg': [0,0],\r\n    },\r\n    'listaNombresF': ['Lara', 'Eva', 'Clara', 'Marta', 'Fatima', 'Anna', 'Lucia', 'Carmen'],\r\n  },\r\n  'tabla':[],\r\n  'seres':[],\r\n\r\n  'listaNecesidades': [\r\n    {\r\n      'requisito': (ser)=>{ return ser.agotamiento >75 },\r\n      'estado': 'Agotado',\r\n      'accion': 'Agotado',\r\n      'efecto': 'Dormido',\r\n      'tiempoAccion': 50,\r\n    }\r\n  ],\r\n  'listaMemorias': [\r\n    {\r\n      'id': 0,\r\n      'nombre': 'Dormir en el suelo',\r\n      'detonante': \"Agotado\",\r\n      'accion': \"Yendo a dormir\",\r\n      'satisfaccionGeneral': 5,\r\n      'satisfaccionEspecifica': [\r\n        {\r\n          'id': 0,\r\n          'idPos': 33,\r\n          'especifica': 50,\r\n        }\r\n      ],\r\n      'origenDescubrimiento': 'Natal',\r\n      'edadDescubrimiento': 0,\r\n      'obtiene': (ser)=>{ return db.seres[ser.id].agotamiento = 10},\r\n    }\r\n  ]\r\n}","import { db } from './db.js';\r\n\r\n//Devuelve una posición [x,y] a partir de una id de casilla\r\nexport function idToPos(id){\r\n    let y = Math.floor(id/db.config.numCasillas);\r\n    let x = Math.abs(id-(y*db.config.numCasillas));\r\n    return [x,y];\r\n}\r\nexport function ran(min, max){ \r\n    return Math.floor(Math.random()*(max-min+1) )+min;\r\n}\r\n\r\n//Devuelve a partir de una [x, y], la posición id de la casilla\r\nexport function posToId(pos){\r\n    return pos[0]+(pos[1]*db.config.numCasillas);   \r\n}\r\n\r\n//Regresa un array con los 8 vecinos al rededor de la casilla id\r\nexport function vecinos(id){\r\n    let arrTemp = [];\r\n    let casillasTotales = db.config.numCasillas*db.config.numCasillas;\r\n    let numCasillas = db.config.numCasillas;\r\n\r\n    //Arriba\r\n    if(id - numCasillas >= 0){arrTemp.push(id - numCasillas)}\r\n    //Arriba-Derecha\r\n    if(id - numCasillas +1 >= 0 && idToPos( id-numCasillas+1 )[1] === idToPos(id-numCasillas)[1]){ arrTemp.push(id - numCasillas +1)}\r\n    //Derecha\r\n    if(idToPos(id+1)[1] === idToPos(id)[1]){arrTemp.push(id+1);}\r\n    //Abajo-Derecha\r\n    if(id + numCasillas +1 < casillasTotales-1 && idToPos( id+numCasillas+1 )[1] === idToPos(id+numCasillas)[1]){ arrTemp.push(id + numCasillas +1)}\r\n    //Abajo\r\n    if(id + numCasillas < casillasTotales-1){arrTemp.push(id + numCasillas)}\r\n    //Abajo-Izquierda\r\n    if(id + numCasillas -1 < casillasTotales-1 && idToPos( id+numCasillas-1 )[1] === idToPos(id+numCasillas)[1]){ arrTemp.push(id + numCasillas -1)}\r\n    //Izquierda\r\n    if(idToPos(id-1)[1] === idToPos(id)[1]){arrTemp.push(id-1);}\r\n    //Arriba-Izquierda\r\n    if(id - numCasillas -1 >= 0 && idToPos( id-numCasillas-1 )[1] === idToPos(id-numCasillas)[1]){ arrTemp.push(id - numCasillas -1)}\r\n\r\n    return arrTemp;\r\n}\r\n\r\n//Devuelve la distancia en casillas desde un punto a otro.\r\nexport function distAB(origen, destino){\r\n    return Math.abs( idToPos( origen )[0] - idToPos( destino )[0] ) +  Math.abs(idToPos( origen )[1] - idToPos( destino )[1] )\r\n}\r\n\r\n//Devuelve del 1 al 8, indicando la posicion en que mira 1 = arriba, 2 = arriba-derecha, 3 = derecha...\r\nexport function direccionMirada(idOrigen, idDestino){\r\n    let origen = idToPos(idOrigen);\r\n    let destino = idToPos(idDestino);\r\n\r\n    if( idDestino < idOrigen ){\r\n        if (destino[1] === origen[1]){ return 7 }\r\n        else if (destino[0] > origen[0]){ return 2 }\r\n        else if (destino[0] < origen[0]){ return 8 }\r\n        else { return 1 }\r\n\r\n    }else if( idDestino > idOrigen ){\r\n        if (destino[1] === origen[1]){ return 3 }\r\n        else if (destino[0] > origen[0]){ return 4 }\r\n        else if (destino[0] < origen[0]){ return 6 }\r\n        else { return 5 }\r\n    }\r\n    return 0;\r\n}\r\n","import { db } from './db.js';\r\nimport { idToPos, vecinos, direccionMirada, ran} from './tabla.js';\r\nimport spriteMapaSuelo01 from '../recurse/SpritesTerreno01.jpg';\r\nimport spriteMapaSuelo02 from '../recurse/SpritesTerreno02.jpg';\r\nimport spriteMapaSuelo03 from '../recurse/SpritesTerreno03.jpg';\r\nimport personajes01 from '../recurse/Personajes01.png';\r\n\r\n\r\nexport function crearTabla(){\r\n\r\n    let i = 0;\r\n    for( let y = 0 ; y < db.config.numCasillas ; y++ ){\r\n        for( let x = 0 ; x < db.config.numCasillas ; x++ ){\r\n\r\n            db.tabla.push({\r\n                'id': i,\r\n                'pos': [ x,y ],\r\n                'obstaculo': false,\r\n                'imagenEncadenada': false,\r\n                'imagenInterior': false,\r\n                'penalizacionMov': 0,\r\n                'imgSuelo': spriteMapaSuelo01,\r\n                'posImg': \r\n                    Math.random()< 0.75 ? [0,0] : \r\n                    Math.random() > 0.95 ? \r\n                        Math.random() > 0.7 ? [1000, 800] : [Math.floor(Math.random()*6)*200, 800]:\r\n                        [Math.floor(Math.random()*7)*200, 1400-Math.floor(Math.random()*3)*200],\r\n            });\r\n            i++;\r\n            if(db.tabla[db.tabla.length-1].posImg[1] === 800){\r\n                db.tabla[db.tabla.length-1].penalizacionMov = 300;\r\n            }\r\n    }}\r\n\r\n   //Generar Placa\r\n   generarBioma('Pradera');\r\n   generarBioma('Montaña');\r\n   generarBioma('Lagos');\r\n   generarBioma('Bosque');\r\n   \r\n\r\n}\r\n\r\nfunction generarBioma(bioma){\r\n    switch (bioma) {\r\n\r\n        case 'Valle':\r\n            generarBloques( 'expansiva', 300, 500, 2, 3, spriteMapaSuelo01, 'elevacion');\r\n            generarBloques( 'compacta', 300, 500, 2, 5, spriteMapaSuelo01, 'elevacion');\r\n            generarBloques( 'compacta', 1, 5, 20, 30, spriteMapaSuelo01, 'elevacion');\r\n            break;\r\n        case 'Montaña':\r\n            generarBloques( 'expansiva', 300, 500, 2, 3, spriteMapaSuelo01, 'elevacion');\r\n            generarBloques( 'compacta', 50, 200, 10, 20, spriteMapaSuelo01, 'elevacion');\r\n            generarBloques( 'compacta', 1, 20, 20, 30, spriteMapaSuelo01, 'elevacion');\r\n            break;\r\n        case 'Lagos':\r\n            generarBloques( 'expansiva', 300, 500, 2, 3, spriteMapaSuelo02, 'agua');\r\n            generarBloques( 'compacta', 50, 200, 10, 20, spriteMapaSuelo02, 'agua');\r\n            generarBloques( 'compacta', 20, 50, 20, 30, spriteMapaSuelo02, 'suelo');\r\n            break;\r\n        case 'Pradera':\r\n            generarBloques( 'repartida', 1, 100, 5, 10, spriteMapaSuelo02, 'arboledaVerde');\r\n            generarBloques( 'expansiva', 60, 150, 2, 4, spriteMapaSuelo02, 'arboledaVerde');\r\n            generarBloques( 'expansiva',5, 10, 1, 3, spriteMapaSuelo02, 'agrupacion');\r\n            generarBloques( 'expansiva',5, 10, 1, 3, spriteMapaSuelo02, 'agrupacion');\r\n            generarBloques( 'expansiva',5, 10, 1, 3, spriteMapaSuelo02, 'agrupacion');\r\n            generarBloques( 'expansiva',5, 10, 1, 3, spriteMapaSuelo02, 'agrupacion');\r\n            generarBloques( 'expansiva',5, 10, 1, 3, spriteMapaSuelo01, 'agrupacion');\r\n            generarBloques( 'expansiva',5, 10, 1, 3, spriteMapaSuelo01, 'agrupacion');\r\n            break;\r\n        case 'Bosque':\r\n            generarBloques( 'compacta', 50, 150, 3, 8, spriteMapaSuelo03, 'interior');\r\n            generarBloques( 'expansiva', 400, 800, 2, 4, spriteMapaSuelo03, 'interior');\r\n            generarBloques( 'repartida', 20, 50, 2, 4, spriteMapaSuelo03, 'interior');\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction generarBloques(tipo ,tamMin, tamMax, cantMin, cantMax, imgBioma, tipoBloque){\r\n\r\n    let numCasillasTotal = db.config.numCasillas*db.config.numCasillas;   \r\n    let listaTemp = [];\r\n    let listaFinal = [];\r\n\r\n    for(let cantidad = 0; cantidad < ran(cantMin, cantMax) ; cantidad++){\r\n        listaTemp = [ran(0, numCasillasTotal)];\r\n\r\n        for(let i = 0; i < ran(tamMin, tamMax) ; i++){          \r\n\r\n            if(tipo === 'expansiva'){\r\n                listaTemp = listaTemp.concat( vecinos( listaTemp[listaTemp.length-1] ).filter(()=>{return ran(0,100)>80}));\r\n            }\r\n            else if(tipo === 'compacta'){\r\n                listaTemp = listaTemp.concat( vecinos( listaTemp[listaTemp.length-1] ).filter(()=>{return ran(0,100)>30}));\r\n                listaTemp = listaTemp.concat( vecinos( listaTemp[ran(listaTemp.length/2, listaTemp.length)] ));\r\n            }\r\n            else if(tipo === 'repartida'){\r\n                listaTemp = listaTemp.concat( vecinos( listaTemp[ran(0, listaTemp.length-1)] ).filter(()=>{return ran(0,100)>90}));\r\n                listaTemp[ran(0, listaTemp.length-1)] = ran(0, numCasillasTotal-1);\r\n            }\r\n            listaFinal = listaFinal.concat(listaTemp);\r\n        }\r\n    }\r\n\r\n    //Añadir todos los objetos a la tabla\r\n    let objetoFijo = [ ran(0,5)*200 ,ran(5,7)*200 ];\r\n    listaFinal.map( obj=> {\r\n        db.tabla[obj].imgSuelo = imgBioma;\r\n        db.tabla[obj].imagenInterior = false;\r\n        db.tabla[obj].obstaculo = false;\r\n        db.tabla[obj].imagenEncadenada = false;\r\n        db.tabla[obj].penalizacionMov = 0;\r\n\r\n        if(tipoBloque === 'elevacion'){\r\n            db.tabla[obj].obstaculo = true;            \r\n            db.tabla[obj].imagenEncadenada = true;\r\n            db.tabla[obj].penalizacionMov = 1000;\r\n        }\r\n        else if(tipoBloque === 'agua'){\r\n            db.tabla[obj].imagenEncadenada = true;\r\n            db.tabla[obj].penalizacionMov = 400;\r\n        }\r\n        else if(tipoBloque === 'suelo'){\r\n            if(db.tabla[obj].posImg[1] === 800){\r\n                db.tabla[obj].penalizacionMov = 300;\r\n            }\r\n        }\r\n        else if(tipoBloque === 'arboledaVerde'){\r\n            db.tabla[obj].posImg = [ (ran(0,10)>8 ? 1000 : 1200) ,800];\r\n            db.tabla[obj].penalizacionMov = 300;\r\n        }\r\n        else if(tipoBloque === 'agrupacion'){\r\n            db.tabla[obj].posImg = objetoFijo;\r\n        }\r\n        else if(tipoBloque === 'interior'){\r\n            db.tabla[obj].imagenEncadenada = true; \r\n            db.tabla[obj].imagenInterior = true;\r\n            db.tabla[obj].penalizacionMov = 10;\r\n        }\r\n        \r\n\r\n        \r\n    }); \r\n\r\n}\r\n\r\n\r\nexport function recalcularImagenes(el){\r\n\r\n                //La imagen es encadenada\r\n                if(el.imagenEncadenada === true){\r\n\r\n                    let listaVecinos = vecinos(el.id).filter((vecino)=>{\r\n                        let direccion = direccionMirada(el.id, vecino);\r\n                        if(db.tabla[vecino].imagenEncadenada === true &&\r\n                            db.tabla[vecino].imgSuelo === el.imgSuelo &&\r\n                            (direccion === 1 || direccion === 3 || direccion === 5 || direccion === 7))\r\n                        return db.tabla[vecino].imagenEncadenada === true});\r\n\r\n                    //¿Tiene vecinos?\r\n                    if(listaVecinos.length>0){\r\n                        //Solo un vecino\r\n                        if(listaVecinos.length==1){\r\n                            if (listaVecinos[0] === el.id+1) { db.tabla[el.id].posImg = [0,400] } //A la derecha\r\n                            if (listaVecinos[0] === el.id-1){ db.tabla[el.id].posImg = [800,400] } //A la izquierda\r\n                            if (listaVecinos[0] === el.id+db.config.numCasillas){ db.tabla[el.id].posImg = [400,600] } //Abajo\r\n                            if (listaVecinos[0] === el.id-db.config.numCasillas){ db.tabla[el.id].posImg = [400,400] } //Arriba\r\n                        }\r\n                        //Dos vecinos\r\n                        else if(listaVecinos.length==2){                      \r\n                            if ((listaVecinos[0] === el.id+1 && listaVecinos[1] === el.id-1)||\r\n                                (listaVecinos[1] === el.id+1 && listaVecinos[0] === el.id-1)) { \r\n                                db.tabla[el.id].posImg = [1000, 400];} //En medio horizontal                               \r\n                            else if ((listaVecinos[0] === el.id+db.config.numCasillas && listaVecinos[1] === el.id-db.config.numCasillas)||\r\n                                (listaVecinos[1] === el.id+db.config.numCasillas && listaVecinos[0] === el.id-db.config.numCasillas)) {\r\n                                db.tabla[el.id].posImg = [400, 200];}//En medio vertical              \r\n                            else if ((listaVecinos[0] === el.id-db.config.numCasillas && listaVecinos[1] === el.id+1)||\r\n                            (listaVecinos[1] === el.id-db.config.numCasillas && listaVecinos[0] === el.id+1)) {\r\n                                db.tabla[el.id].posImg = [200, 400];} //Esquina arriba-derecha          \r\n                            else if ((listaVecinos[0] === el.id+db.config.numCasillas && listaVecinos[1] === el.id+1)||\r\n                                (listaVecinos[1] === el.id+db.config.numCasillas && listaVecinos[0] === el.id+1)) {\r\n                                db.tabla[el.id].posImg = [200, 600];} //Esquina abajo-derecha \r\n                            else if ((listaVecinos[0] === el.id+db.config.numCasillas && listaVecinos[1] === el.id-1)||\r\n                            (listaVecinos[1] === el.id+db.config.numCasillas && listaVecinos[0] === el.id-1)) { \r\n                                db.tabla[el.id].posImg = [1200, 200];} //Esquina abajo-izquierda \r\n                            else{ db.tabla[el.id].posImg = [1000, 200]; }//Esquina arriba-izquierda                                  \r\n                        }\r\n                        //Tres vecinos, todos menos...\r\n                        else if(listaVecinos.length==3){\r\n                            if(listaVecinos.includes(el.id-1) === false){ db.tabla[el.id].posImg = [600, 200];}\r\n                            if(listaVecinos.includes(el.id+1) === false){ db.tabla[el.id].posImg = [800, 200];}\r\n                            if(listaVecinos.includes(el.id-db.config.numCasillas) === false){ db.tabla[el.id].posImg = [600, 600];}\r\n                            if(listaVecinos.includes(el.id+db.config.numCasillas) === false){ db.tabla[el.id].posImg = [600, 400];}\r\n                        }\r\n                        \r\n                        else{ \r\n                            listaVecinos = vecinos(el.id).filter((vecino)=>{\r\n                                return db.tabla[vecino].imgSuelo === el.imgSuelo});\r\n                                \r\n                            //Ocho vecinos\r\n                            if(listaVecinos.length === 8 && ran(0,10)>3){\r\n                                if(ran(0,20)==20){db.tabla[el.id].posImg = [800, 600];}\r\n                                else{db.tabla[el.id].posImg = [1000, 600];}\r\n                            }else{\r\n                                //Cuatro vecinos\r\n                                db.tabla[el.id].posImg = [200, 200];                                \r\n                            }\r\n                        }\r\n                    //Solo\r\n                    }else{ db.tabla[el.id].posImg = [1200, 600]; }\r\n\r\n                    //Sprites interiores\r\n                    if(db.tabla[el.id].imagenInterior && listaVecinos.length === 8){\r\n                        db.tabla[el.id].penalizacionMov = 10;\r\n                        if(ran(0,50)>42){\r\n                            db.tabla[el.id].posImg = [ ran(0,5)*200 ,ran(5,7)*200 ];\r\n                            db.tabla[el.id].penalizacionMov = 100;\r\n                        }else if(ran(0,50)>25){\r\n                            db.tabla[el.id].posImg = [ ran(4,5)*200 ,600 ];\r\n                        }else if(ran(0,10)>5){\r\n                            db.tabla[el.id].posImg = [ ran(0,5)*200 ,800 ];\r\n                            db.tabla[el.id].penalizacionMov = 500;                           \r\n                        }\r\n                         \r\n                        db.tabla[el.id].obstaculo = false;\r\n                    }\r\n                }\r\n\r\n  \r\n            }\r\n\r\n\r\n\r\nexport function crearSer(idPos){\r\n    \r\n    db.seres.push(\r\n        {\r\n            'id': db.seres.length,\r\n            'nombre': db.config.listaNombresF[ ran(0,  db.config.listaNombresF.length-1) ],\r\n            'tipo': 'criatura',\r\n            'pos': idToPos(idPos),\r\n            'dest': idToPos(35),\r\n            'ruta': [],\r\n            'posIntermedia': idToPos(idPos),\r\n            'velocidad': ran(1,10),\r\n            'direccionMov': 0,\r\n            'img': personajes01,\r\n            'estado': \"\",\r\n            'accion': \"\",\r\n            'tareaCalculada': false,\r\n            'memoriaActiva': {},\r\n            'objetivoEnMarcha': false,\r\n            'necesidad': {},\r\n            'necesidadActivada': false,\r\n            'tiempoAccion': 0,\r\n\r\n            'inteligencia': ran(7,20),\r\n            'memoria': [db.listaMemorias[0]],\r\n            'agotamiento': ran(100,120),\r\n            'sed': ran(5,70),\r\n            'hambre': ran(5,70),\r\n            'salud': ran(5,70),\r\n        }\r\n    )\r\n}\r\n","//import { db } from './db.js';\r\nimport { distAB, direccionMirada, posToId, vecinos} from './tabla.js';\r\nimport { db } from './db.js';\r\n\r\nexport function obtenerRuta(ser, pos, dest){\r\n    let listaCerrada = [];\r\n    let posTemp = posToId(pos);\r\n    let listaCalcular = [];\r\n    let listaFinal = [];\r\n    \r\n    //Numero de vueltas que dará como máximo el bucle para encontrar una ruta;\r\n    let maximoPasosBucle = 300;\r\n    let pasosMaximo = 0;\r\n\r\n    let listaAbierta = [\r\n        {\r\n        'id': posToId(pos),\r\n        'g': 0,\r\n        'h': distAB( posToId( pos ),posToId( dest ) )*10,\r\n        'f': 0+(distAB( posToId( pos ),posToId( dest ) )*10)+db.tabla[posToId(pos)].penalizacionMov,\r\n        'padre': posToId(pos),\r\n\r\n        }\r\n    ];\r\n\r\n    while (pasosMaximo < maximoPasosBucle) {\r\n        pasosMaximo++;\r\n\r\n        //1. Meter menor F de abierta a cerrada y eliminarlo. Cambiar posicion actual\r\n        if( listaAbierta.length > 0 ){  \r\n            posTemp = aCerrada( menorF( listaAbierta ), listaAbierta, listaCerrada).id;\r\n        }\r\n\r\n        //2. Almacenar vecinos en listaCalcular\r\n        listaCalcular = vecinos(posTemp);\r\n\r\n        //3 Obj es el destino?\r\n        let idFinal = listaCalcular.filter((obj)=>{return obj == posToId(dest)});\r\n        if( idFinal[0] == posToId(dest) ){\r\n            let el = listaCerrada[listaCerrada.length-1];\r\n\r\n            listaCerrada.push(\r\n                {\r\n                    'id': idFinal[0],\r\n                    'g': el.g+costeBase( direccionMirada( el.id, idFinal[0] )),\r\n                    'h': distAB( idFinal[0] ,posToId( dest ) )*10,\r\n                    'f': el.g+costeBase( direccionMirada( el.id, idFinal[0] )) + (distAB( idFinal[0] ,posToId( dest ) )*10) + db.tabla[idFinal[0]].penalizacionMov,\r\n                    'padre': el.id,\r\n                });\r\n\r\n            //Conversión final y fin del programa.\r\n            return conversionFinal(listaCerrada, listaFinal, dest, pasosMaximo);\r\n            \r\n        }else{\r\n            //4.Comprobar posiciones...\r\n            listaCalcular.map((obj)=>{\r\n\r\n                //Si no está en lista cerrada y no es un obstaculo\r\n                if( listaCerrada.filter( objCerrada => objCerrada.id === obj ).length === 0 && db.tabla[obj].obstaculo === false){\r\n          \r\n                    let objDestino = listaAbierta.filter( objAbierta => objAbierta.id === obj );\r\n                    let el = listaCerrada[listaCerrada.length-1];\r\n\r\n                    if(objDestino.length>0){\r\n                        //Si está en la lista abierta\r\n                        if(el.g + costeBase( direccionMirada( el.id, obj )) < objDestino.g){\r\n                            return addObj( el.g,listaAbierta, obj, dest, db, posTemp );\r\n                        }\r\n                    }else{\r\n                        //Si no está en lista abierta, lo añade\r\n                        return addObj( el.g, listaAbierta, obj, dest, db, posTemp );\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if(pasosMaximo>maximoPasosBucle-1){\r\n            return conversionFinal(listaCerrada, listaFinal, dest, pasosMaximo);\r\n        }\r\n    }\r\n}\r\n\r\nfunction costeBase(direccion){\r\n    if(direccion === 1 || direccion === 3 || direccion === 5 || direccion === 7 ){\r\n        return 10;\r\n    }\r\n    if(direccion === 2 || direccion === 4 || direccion === 6 || direccion === 8 ){\r\n        return 14;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction menorF(arr){\r\n\r\n    let idArrFinal = 0;\r\n    let f = arr[0].f;\r\n\r\n    arr.map((obj, i) => {\r\n        if (f > obj.f){\r\n            f = obj.f\r\n            idArrFinal = i;};\r\n    });\r\n    return arr[idArrFinal];\r\n}\r\n\r\nfunction aCerrada(id, abierta, cerrada){\r\n\r\n    abierta.map((obj, i)=>{\r\n        if(obj === id) {\r\n            cerrada.push(obj);\r\n            abierta.splice(i, 1);\r\n        }\r\n    });\r\n    return id;\r\n}\r\n\r\nfunction addObj(g, listaAbierta, obj, dest, db, posTemp){\r\n\r\n    listaAbierta.push(\r\n        {\r\n            'id': obj,\r\n            'g': g+costeBase( direccionMirada( posTemp, obj )),\r\n            'h': distAB( obj ,posToId( dest ) )*10,\r\n            'f': g+costeBase( direccionMirada( posTemp, obj )) +  (distAB( obj ,posToId( dest ) )*10) + db.tabla[obj].penalizacionMov,\r\n            'padre': posTemp,\r\n        }\r\n    );\r\n    return listaAbierta[listaAbierta.lenght-1];\r\n}\r\n\r\nfunction conversionFinal(listaCerrada, listaFinal, dest, pasosMaximo, rutaCompleta){\r\n\r\n    let arrInversa = listaCerrada.reverse();\r\n    let next = arrInversa[0].id;\r\n    if(rutaCompleta){\r\n        listaFinal.push(posToId( dest ));\r\n    }else{\r\n        listaFinal.push(next);\r\n    }\r\n    \r\n\r\n    arrInversa.map((objFinal, i)=>{\r\n        if(objFinal.id == next){ \r\n            listaFinal.push(objFinal.id);\r\n            next = objFinal.padre;}\r\n    });\r\n    //Devuelve la ruta\r\n    return listaFinal.reverse();\r\n}","import React, { Component } from 'react';\r\nimport { db } from './db.js';\r\nimport '../css/seresIA.css';\r\nimport { obtenerRuta} from './algoritmoAEstrella.js';\r\nimport { idToPos, posToId, direccionMirada, ran, distAB} from './tabla.js';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\n\r\n\r\nexport class DibujarSeres extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            'id': this.props.ser.id,\r\n            'tam': db.config.tamCasilla,\r\n            'vivido': 0,\r\n            'posIntermedia': this.props.ser.posIntermedia,\r\n        }\r\n\r\n\r\n        //Calcula cual es la mejor valoración de una array de memorias\r\n        function mejorValoracion(arr, dest){\r\n            let calcular = (obj, mem)=>{ return (obj.especifica + mem.satisfaccionGeneral + distAB( obj.idPos , posToId( dest )))/3;};         \r\n            let memFinal = {\r\n                'id': 0,\r\n                'mejorIdEspecifica': 0,\r\n                'valorFinal': 0,\r\n            }\r\n            arr.map((mem)=>{\r\n                mem.satisfaccionEspecifica.map((obj)=>{\r\n                    if( calcular( obj, mem) > memFinal.valorFinal ){\r\n                        memFinal = {\r\n                            'id': mem.id,\r\n                            'mejorIdEspecifica': obj.id,\r\n                            'valorFinal': calcular( obj, mem ),\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            return memFinal;\r\n        }\r\n\r\n\r\n        function init(state){\r\n            let ser = db.seres[state.id];\r\n            let comprobarNecesidades = [];\r\n            let listaMemoriasCompatibles = [];\r\n            let memFinal = {};\r\n\r\n            //NO TIENE NECESIDADES ACTIVAS\r\n            if(ser.necesidadActivada === false){\r\n\r\n                console.log('Comprobando necesidades');\r\n                comprobarNecesidades = db.listaNecesidades.filter((necesidad)=>{ return necesidad.requisito(ser); })\r\n    \r\n                //Si tiene necesidades\r\n                if( comprobarNecesidades.length > 0){\r\n                    console.log('Necesidad detectada '+comprobarNecesidades[0].estado);\r\n                    db.seres[state.id].estado = comprobarNecesidades[0].estado;\r\n    \r\n                    //Ha CALCULADO UNA SOLUCIÓN\r\n                    if(ser.tareaCalculada === false){\r\n                        //NO, NO LO HA CALCULADO AUN\r\n                        console.log('Calculando tarea...');\r\n                        \r\n                        //Bloquear siguiente paso\r\n                        db.seres[state.id].objetivoEnMarcha = false;\r\n    \r\n                        //Calcula si tiene en memoria una solución\r\n                        listaMemoriasCompatibles = ser.memoria.filter((memCal)=>{ return memCal.detonante === ser.estado;});\r\n                        if( listaMemoriasCompatibles.length > 0){\r\n    \r\n                            //Si, tiene una solución\r\n                            memFinal = mejorValoracion(listaMemoriasCompatibles, ser.dest);\r\n    \r\n                            //La solución es satisfactoria?\r\n                            if( memFinal.valorFinal > 0 ){\r\n    \r\n                                //Si, es una solución váida.\r\n                                db.seres[state.id].memoriActiva = memFinal;\r\n                                db.seres[state.id].tareaCalculada = true;\r\n                                db.seres[state.id].objetivoEnMarcha = true;\r\n                                db.seres[state.id].necesidad = db.listaNecesidades.filter((necesidad)=>{ return necesidad.requisito(ser)})[0];\r\n                                db.seres[state.id].estado = ser.necesidad.estado;\r\n                                db.seres[state.id].accion = ser.necesidad.accion;\r\n                                console.log('Sabe que hacer '+ser.estado);\r\n                                db.seres[state.id].necesidadActivada = true;\r\n    \r\n                                //La solución encontrada no es satisfactoria\r\n                            }else{\r\n                                console.log('La solución encontrada no es satisfactoria');\r\n                            }\r\n    \r\n                            //No tiene una solución\r\n                        }else{\r\n                            console.log('No conoce una solución');\r\n                            //db.seres[state.id].estado = 'Explorando';\r\n                        }\r\n    \r\n                        //SI, YA A CALCULADO UNA SOLUCIÓN\r\n                    }else{\r\n                        console.log('Tarea calculada con exito!');\r\n                    }\r\n    \r\n                //No tiene necesidades\r\n                }else{\r\n                    console.log('No tiene necesidades');\r\n                    db.seres[state.id].dest = idToPos(ran(0,500));\r\n                    db.seres[state.id].objetivoEnMarcha = true;\r\n                }\r\n            }else{\r\n                //tIENE ACTIVADA LA NECESIDAD\r\n\r\n            }\r\n           \r\n\r\n            //TIENE YA UN OBJETIVO\r\n            if(ser.objetivoEnMarcha === true){\r\n\r\n                \r\n                //Si no está en su destino se mueve hacia el\r\n                if( posToId(ser.pos) !== posToId(ser.dest) ){\r\n                    console.log('Moviendose...');\r\n                    moverse(ser); \r\n\r\n                //Una vez llega a su destino    \r\n                }else{\r\n                    //HAY UN TIEMPO DE ACCIÓN DE LA TAREA EN MARCHA?\r\n                    if(db.seres[state.id].tiempoAccion > 0){\r\n                        console.log('Tick-tack: '+ser.tiempoAccion);\r\n                        db.seres[state.id].tiempoAccion --;\r\n\r\n                        //TIEMPO CUMPLIDO - CUMPLE LA ACCION Y CAMIBA A ESTADO NORMAL\r\n                        if(db.seres[state.id].tiempoAccion === 0){\r\n                            console.log(' y fin');\r\n                            //Falta valorar si el lugar ha ofrecido lo que prometia\r\n            \r\n                            db.seres[state.id].objetivoEnMarcha = false;\r\n                            db.seres[state.id].tareaCalculada = false;\r\n                            db.seres[state.id].ruta = [];\r\n                            db.seres[state.id].estado = '';\r\n                            db.seres[state.id].accion = '';\r\n                            db.seres[state.id].necesidad = {};\r\n                            db.seres[state.id].necesidadActivada = false;\r\n                        }\r\n                    \r\n                    //NO HAY TIEMPO DE ACCIÓN PERO SI UNA NECESIDAD QUE LO ACTIVA\r\n                    }else if(ser.necesidadActivada){\r\n                        \r\n                        ser.memoria[ser.memoriActiva.id].obtiene(ser);\r\n                        db.seres[state.id].estado = ser.necesidad.efecto;\r\n                        db.seres[state.id].tiempoAccion = ser.necesidad.tiempoAccion;\r\n                        db.seres[state.id].ruta = [];\r\n                        db.seres[state.id].necesidad = {};\r\n                        console.log(ser.nombre+ ' ha llegado a su destino '+ posToId(ser.dest)+ ' y esta '+ ser.estado);\r\n                    }\r\n                    else{\r\n                        //RUTA ALCANZADA Y SIN NECESIDADES DE ACCIÓN\r\n                        db.seres[state.id].tiempoAccion = ran(1,50);\r\n                    }\r\n                }            \r\n            }\r\n        }\r\n\r\n\r\n\r\n        function moverse(ser){\r\n            console.log('Moviendo...');\r\n\r\n            if(ser.ruta.length > 0 ){              \r\n                //Si no esta en el paso intermedio va a el\r\n                if(posToId(ser.pos) !== posToId(ser.posIntermedia)){\r\n                    darPasoDireccion(ser, ser.direccionMov);\r\n                    //Siguen quedando pasos en la ruta, lo añade como paso intermedio\r\n                    if(ser.ruta.length>0){\r\n                        ser.posIntermedia = idToPos(ser.ruta[0]);\r\n                    }\r\n                //Ha llegado al paso intermedio\r\n                }else{                  \r\n                    ser.ruta.shift();\r\n                    //Siguen quedando pasos\r\n                    if(ser.ruta.length > 0 ){\r\n                        ser.posIntermedia = idToPos(ser.ruta[0]);\r\n                        ser.direccionMov = direccionMirada(posToId(ser.pos), posToId(ser.posIntermedia));\r\n                        darPasoDireccion(ser, ser.direccionMov);\r\n                    //No quedan pasos\r\n                    }else{\r\n                        ser.posIntermedia = ser.pos; \r\n                    }                     \r\n                }\r\n\r\n            //NO HAY RUTA    \r\n            }else{\r\n                //AÑADE UNA NUEVA RUTA HACIA EL DESTINO\r\n                console.log(ser.nombre+' Buscando una nueva ruta a '+posToId(ser.dest));\r\n                ser.ruta = obtenerRuta(ser, ser.pos, ser.dest);\r\n                if(ser.ruta.length > 0 ){\r\n                    ser.posIntermedia = idToPos(ser.ruta[0]);\r\n                }else{\r\n                    //No ha podido obtener una ruta, 0 pasos encontrados.\r\n                    console.log('No ha podido obtener una ruta, 0 pasos encontrados.')\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        function darPasoDireccion(ser, direccion){\r\n            let vel = (db.config.tamCasilla/4)/db.config.tamCasilla;\r\n            \r\n            if(ran(0, db.tabla[posToId( db.seres[ser.id].posIntermedia )].penalizacionMov) < ser.velocidad ||\r\n            ran(0,10)>7){//velocidad minima\r\n            \r\n            db.seres[ser.id].agotamiento += 1;\r\n\r\n            switch (direccion) {\r\n                case 1:\r\n                    ser.pos[1] -= vel;\r\n                    break;\r\n                case 2:\r\n                    ser.pos[1] -= vel;\r\n                    ser.pos[0] += vel;\r\n                    break;\r\n                case 3:\r\n                    ser.pos[0] += vel;\r\n                    break; \r\n                case 4:\r\n                    ser.pos[0] += vel;\r\n                    ser.pos[1] += vel;\r\n                    break; \r\n                case 5:\r\n                    ser.pos[1] += vel;\r\n                    break;   \r\n                case 6:\r\n                    ser.pos[1] += vel;\r\n                    ser.pos[0] -= vel;\r\n                    break;\r\n                case 7:\r\n                    ser.pos[0] -= vel;\r\n                    break;\r\n                case 8:\r\n                    ser.pos[0] -= vel;\r\n                    ser.pos[1] -= vel;\r\n                    break;      \r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n        //BUCLE DEL PERSONAJE\r\n        setInterval(() => {\r\n            this.setState({\r\n                'vivido': this.state.vivido++\r\n            })\r\n            init(this.state);\r\n\r\n          },100 );\r\n        \r\n        \r\n    }\r\n\r\n    cambioImagenAccion(ser){\r\n        let x = 0;\r\n        let y = 0;\r\n        if(ser.estado === 'Agotado'){ x = 400;\r\n        }else if(ser.estado === 'Dormido'){ x = 800;\r\n        }\r\n        return x+'px '+y+'px';;\r\n    }\r\n    \r\n    render() {\r\n        let ser = db.seres[this.state.id]; \r\n        let styleSer = {\r\n            'position': 'absolute',\r\n            'zIndex': 2,\r\n            'left': ser.pos[0]*this.state.tam,\r\n            'top': ser.pos[1]*this.state.tam,\r\n            'height': this.state.tam,\r\n            'width': this.state.tam,\r\n\r\n            'backgroundImage': 'url('+ser.img+')',\r\n            'backgroundPosition': this.cambioImagenAccion(ser),\r\n            'backgroundSize': db.config.tamCasilla*6,\r\n        }\r\n\r\n\r\n        return (\r\n            <div style={styleSer} className=\"Seres\">\r\n                {ser.estado}\r\n                {/*\r\n                    ser.ruta.map((pos, i)=>{\r\n                    if(pos != posToId(ser.pos)){\r\n                        return <div style={{\r\n                            'position': 'absolute',\r\n                            'left': ((idToPos(pos)[0]-ser.pos[0])*this.state.tam)+this.state.tam/3,\r\n                            'top': ((idToPos(pos)[1]-ser.pos[1])*this.state.tam)+this.state.tam/3,\r\n                            'height': this.state.tam/8,\r\n                            'width': this.state.tam/8,\r\n                            'background': ser.color,\r\n                        }} key={pos+'-'+i}></div>\r\n                    }})\r\n                */}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  ","import React, { Component } from 'react';\r\nimport { db } from './db.js';\r\n\r\nclass DibujarMapa extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            'obj': this.props.obj.id\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let ser = db.tabla[this.state.obj];\r\n        let imgPos = ()=>{\r\n            let x = (ser.posImg[0]*db.config.tamCasilla)/200;\r\n            let y = (ser.posImg[1]*db.config.tamCasilla)/200;\r\n            return x+'px '+y+'px';\r\n        }\r\n\r\n        let styleCasilla = {\r\n            'position': 'absolute',\r\n            'left': ser.pos[0]*db.config.tamCasilla,\r\n            'top': ser.pos[1]*db.config.tamCasilla,\r\n            'height': db.config.tamCasilla,\r\n            'width': db.config.tamCasilla,\r\n\r\n            'backgroundImage': 'url('+ser.imgSuelo+')',\r\n            'backgroundPosition': imgPos(),\r\n            'backgroundSize': db.config.tamCasilla*6,\r\n            \r\n        }\r\n\r\n        return (\r\n            <div style={styleCasilla}>\r\n                { db.config.vista === 'VerObstaculo' && <div style={{'color': ser.obstaculo ? 'red':'white' }}>{''+ser.obstaculo}</div> }\r\n                { db.config.vista === 'VerPenalizacion' && <div>{ser.penalizacionMov}</div> }\r\n                { db.config.vista === 'verIdCasillas' && <div>{ser.id}</div> }\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n  export default DibujarMapa;","import React, { Component } from 'react';\nimport './App.css';\nimport { db } from './js/db.js';\nimport { crearTabla, generarPlaca, crearSer, recalcularImagenes } from './js/configMap.js';\nimport { DibujarSeres } from './js/seresIA.js';\nimport DibujarMapa from './js/mapa.js';\n\n//import { ran } from './js/tabla.js';\n\n  \n//MOTOR DEL JUEGO\n\n  crearTabla();\n  db.tabla.map( obj => recalcularImagenes(obj) );\n\n  crearSer(0);\n  for(let i = 0; i< 5; i++){\n    crearSer(i);\n  }\n  \n    \n\n//TALLER DE PRUEBAS\n\n\nconst times = [];\nlet fps;\n\nfunction refreshLoop() {\n  console.log('FPS: '+fps);\n  window.requestAnimationFrame(() => {\n    const now = performance.now();\n    while (times.length > 0 && times[0] <= now - 1000) {\n      times.shift();\n    }\n    times.push(now);\n    fps = times.length;\n    refreshLoop();\n  });\n}\n\n//refreshLoop();\n\n//Detectar entradas del teclado\nlet tecla = 0;\ndocument.onkeypress = (event)=>{\n  console.log(\"Tecla: \" +event.keyCode);\n\n  if(event.keyCode === 101 && db.config.tamCasilla+10 < 150){ db.config.tamCasilla += 10;}\n  if(event.keyCode === 113 && db.config.tamCasilla-10 > 0){ db.config.tamCasilla -= 10;}\n  if(event.keyCode === 100){ window.scrollTo(window.scrollX+25, window.scrollY);}\n  if(event.keyCode === 97){ window.scrollTo(window.scrollX-25, window.scrollY);}\n  if(event.keyCode === 119){ window.scrollTo(window.scrollX, window.scrollY-25);}\n  if(event.keyCode === 115){ window.scrollTo(window.scrollX, window.scrollY+25);}\n  tecla = event.keyCode;\n}\ndocument.onkeyup = (event)=>{\n  if(event.keyCode === tecla){\n    tecla = 0;\n  }\n}\n\n//Detectar entradas del ratón\ndocument.onmousedown = (event)=>{\n  console.log(\"Codigo ratón: \" +event.button);\n\n}\n\n//PINTAR EL JUEGO\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      'tamCasilla': db.config.tamCasilla,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        {\n          db.tabla.map((obj, i)=>{\n            return <DibujarMapa obj={obj} key={obj+'-'+i}/>\n          })\n        }\n        \n        {\n          db.seres.map((ser, i)=>{\n            return <DibujarSeres db={db} ser={ser} key={ser+'-'+i}/>\n          })\n        } \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}